/*
 * patNetworkElements.h
 *
 *  Created on: Jul 20, 2011
 *      Author: jchen
 *
 *      The class stores basic elements (nodes, arcs and ways) of the network.
 *      Nodes are points in the network.
 *      Arcs are straight lines connecting two nodes.
 *      Ways are a collection of arcs, defined by OSM.
 */

#ifndef PATNETWORKELEMENTS_H_
#define PATNETWORKELEMENTS_H_
#include "patArc.h"
#include "patNode.h"
#include "patWay.h"
#include "patGeoBoundingBox.h"
#include "patPublicTransportSegment.h"
#include <map>
#include <list>

class patNetworkElements {

public:
	/**
	 * Constructor, do nothing.
	 */
	patNetworkElements();

	/**
	 * Add a node to the network.
	 * @param the_id the identifier of the node.
	 * @param the node The reference to the node.
	 * @param err The error pointer.
	 *
	 * @return True if adding is successful; False otherwise;
	 */
	patBoolean addNode(patULong the_id, patNode& the_node, patError*& err);

	/**
	 * Add a way to the network.
	 * Ways, defined by OSM, are a connection of straight arcs.
	 * @param the_way The pointer to the way;
	 * @param the_list_of_nodes_ids. The list of the ids of the nodes i the way;
	 * @param err. Error;
	 *
	 * @return True if adding is successful; False otherwise;
	 */
	patBoolean addWay(patWay* the_way,list<patULong> the_list_of_nodes_ids, patError*& err);
	patBoolean addProcessedWay(patWay& the_way,list<patULong> the_list_of_nodes_ids,
			patULong source, patULong target, patError*& err);
	/**
	 * Get the pointer to the way sets;
	 * @return A pointer to the ways member variable containing all the ways in the network;
	 */
	const map<patULong, patWay>* getWays();

	/**
	 * Add an arc into the network.
	 * Create an new arc by using its up node and down node.
	 * The new arc pointer is added to the outing and incoming sets of up node and down node.
	 * The id of the way is assigned to way_id variable of the new arc
	 *
	 * @param upNode The up node of the new arc;
	 * @param downNode the down node of the new arc;
	 * @param theWay The way that contains the arc;
	 * @param err Error pointer
	 * @see patArc::patArc
	 *
	 *
	 * @return Pointer to the new arc;
	 */
	patArc* addArc(patNode* upNode, patNode* downNode, patWay* theWay, patError*& err);

	/**
	 * Read the network from postgresql database given bounding_box;
	 * @param bounding_box The bounding box of the network.
	 * @param err Error pointer
	 * @see readNodesFromPostGreSQL
	 * @see readWaysFromPostGreSQL
	 */
	void readNetworkFromPostGreSQL(patGeoBoundingBox bounding_box, patError*& err);

	/**
	 * Read nodes from the postgresql datbase. Called by patNetworkElements::readNetworkFromPostGreSQL
	 * @param bounding_box The bounding box of the network.
	 * @param err Error pointer
	 *
	 */
	void readNodesFromPostGreSQL(patGeoBoundingBox bounding_box,
			patError*& err);

	/**
	 * Read ways from the postgresql datbase. Called by patNetworkElements::readNetworkFromPostGreSQL
	 * @param bounding_box The bounding box of the network.
	 * @param err Error pointer
	 *
	 */

	void readWaysFromPostGreSQL(patGeoBoundingBox bounding_box,
			patError*& err);


	/**
	 * Return the number of arcs in the network;
	 * @return The number of arcs in the network
	 */
	patULong getArcSize();

	/**
	 * Return the number of ways in the network;
	 */
	patULong getWaySize();
	patULong getNodeSize();
	patNode* getNode(int node_id);
	patArc* getArc(int arc_id);
	/**
	 * Get all the const pointers to all the arcs.
	 */
	const map<patULong, patArc>* getAllArcs();
	patWay* getWay(int way_id);
	patWay* getProcessedWay(int way_id);
	virtual ~patNetworkElements();
	/**
	 * Get arcs from osm id
	 * @param osm_id The osm id of the way.
	 * @return list of arcs.
	 */
	list<patArc*> getArcsFromWayOSMId(int osm_id,patError*& err);
protected:


	map<patULong, patNode> nodes;/**< The map of nodes. Key is the node osm id, value is the node object*/
	map<patULong, patArc> arcs;/**< The map of arcs. Key is the arc id (generated by the program), value is the arc object*/
	map<patULong, patWay> ways;/**< The map of way. Key is the way osm id, value is the way object*/
	map<patULong, patPublicTransportSegment> pt_segments;
	map<patULong, patWay> processed_ways;
private:
	patULong total_nbr_of_arcs;/**< Total number of arcs, used to generate arc id*/

};

#endif /* PATNETWORKELEMENTS_H_ */
