/*
 * patNetworkElements.h
 *
 *  Created on: Jul 20, 2011
 *      Author: jchen
 *
 *      The class stores basic elements (nodes, arcs and ways) of the network.
 *      Nodes are points in the network.
 *      Arcs are straight lines connecting two nodes.
 *      Ways are a collection of arcs, defined by OSM.
 */

#ifndef PATNETWORKELEMENTS_H_
#define PATNETWORKELEMENTS_H_
#include "patArc.h"
#include "patNode.h"
#include "patWay.h"
#include "patGeoBoundingBox.h"
#include "patPublicTransportSegment.h"
#include <map>
#include <list>
#include "patReadNetworkFromOSM.h"
class patNetworkElements {

public:
	/**
	 * Constructor, do nothing.
	 */
	patNetworkElements();

	/**
	 * Add a node to the network.
	 * @param the_id the identifier of the node.
	 * @param the node The reference to the node.
	 *
	 * @return True if adding is successful; False otherwise;
	 */
	patNode* addNode(unsigned long the_id, patNode& the_node);

	/**
	 * Add a way to the network.
	 * Ways, defined by OSM, are a connection of straight arcs.
	 * @param the_way The pointer to the way;
	 * @param the_list_of_nodes_ids. The list of the ids of the nodes i the way;
	 *
	 * @return True if adding is successful; False otherwise;
	 */
	bool addWay(patWay* the_way, list<unsigned long> the_list_of_nodes_ids);
	bool addProcessedWay(patWay& the_way,
			list<unsigned long> the_list_of_nodes_ids, unsigned long source,
			unsigned long target);
	/**
	 * Get the pointer to the way sets;
	 * @return A pointer to the ways member variable containing all the ways in the network;
	 */
	const map<unsigned long, patWay>* getWays() const;

	/**
	 * Add an arc into the network.
	 * Create an new arc by using its up node and down node.
	 * The new arc pointer is added to the outing and incoming sets of up node and down node.
	 * The id of the way is assigned to way_id variable of the new arc
	 *
	 * @param upNode The up node of the new arc;
	 * @param downNode the down node of the new arc;
	 * @param theWay The way that contains the arc;
	 * @see patArc::patArc
	 *
	 *
	 * @return Pointer to the new arc;
	 */
	patArc* addArc(const patNode* upNode, const patNode* downNode,
			patWay* theWay);

	patPublicTransportSegment* addPTSegment(patPublicTransportSegment* ptSeg);
	/**
	 * Read the network from postgresql database given bounding_box;
	 * @param bounding_box The bounding box of the network.
	 * @see readNodesFromPostGreSQL
	 * @see readWaysFromPostGreSQL
	 */
	void readNetworkFromPostGreSQL(patGeoBoundingBox bounding_box);
	void readNetworkFromOSMFile(string file_name,
			patGeoBoundingBox& bounding_box);
	/**
	 * Read nodes from the postgresql datbase. Called by patNetworkElements::readNetworkFromPostGreSQL
	 * @param bounding_box The bounding box of the network.
	 *
	 */
	void readNodesFromPostGreSQL(patGeoBoundingBox bounding_box);

	/**
	 * Read ways from the postgresql datbase. Called by patNetworkElements::readNetworkFromPostGreSQL
	 * @param bounding_box The bounding box of the network.
	 *
	 */

	void readWaysFromPostGreSQL(patGeoBoundingBox bounding_box);

	/**
	 * Return the number of arcs in the network;
	 * @return The number of arcs in the network
	 */
	unsigned long getArcSize() const;

	/**
	 * Return the number of ways in the network;
	 */
	unsigned long getWaySize() const;
	unsigned long getNodeSize() const;
	const patNode* getNode(int node_id) const;
	const patArc* getArc(int arc_id) const;
	/**
	 * Get all the const pointers to all the arcs.
	 */
	const map<unsigned long, patArc>* getAllArcs() const;
	patWay* getWay(int way_id);
	patWay* getProcessedWay(int way_id);
	virtual ~patNetworkElements();
	/**
	 * Get arcs from osm id
	 * @param osm_id The osm id of the way.
	 * @return list of arcs.
	 */
	//list<patArc*> getArcsFromWayOSMId(int osm_id);

	void summarizeMembership();
	const patArc* findArcByNodes(const patNode* up_node,
			const patNode* down_node) const;
	void computeLength();
	void computeGeneralizedCost(const map<ARC_ATTRIBUTES_TYPES, double>& link_coef);
	set<const patNode*> getNearbyNode(const patCoordinates& coords,
			double distance, int count) const;

	const set<const patNode*>* getRailwayStations() const;
protected:

	map<unsigned long, patNode> m_nodes;/**< The map of nodes. Key is the node osm id, value is the node object*/
	map<unsigned long, patArc> m_arcs;/**< The map of arcs. Key is the arc id (generated by the program), value is the arc object*/
	map<unsigned long, patWay> m_ways;/**< The map of way. Key is the way osm id, value is the way object*/

	map<unsigned long, patPublicTransportSegment> m_pt_segments;
	map<unsigned long, patWay> m_processed_ways;
	map<const patNode*, map<const patNode*, const patArc*> > m_node_arc_membership;

	set<const patNode*> m_railway_stations;
private:
	unsigned long total_nbr_of_arcs;/**< Total number of arcs, used to generate arc id*/
	unsigned long total_nbr_of_pt_segs;
};

#endif /* PATNETWORKELEMENTS_H_ */
